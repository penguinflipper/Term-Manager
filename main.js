/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TermManager
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  term_colour: "#FFFFFF",
  term_bold: true,
  term_italics: false,
  defn_colour: "#FFFFFF",
  defn_bold: false,
  defn_italics: false
};
var TermManager = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.termDict = {};
    this.defaultHeadings = "# A\n---\n# B\n---\n# C\n---\n# D\n---\n# E\n---\n# F\n---\n# G\n---\n# H\n---\n# I\n---\n# J\n---\n# K\n---\n# L\n---\n# M\n---\n# N\n---\n# O\n---\n# P\n---\n# Q\n---\n# R\n---\n# S\n---\n# T\n---\n# U\n---\n# V\n---\n# W\n---\n# X\n---\n# Y\n---\n# Z\n---\n";
    this.termRegex = />[a-zA-Z][a-zA-Z0-9 ]*</;
  }
  async onload() {
    await this.loadSettings();
    this.app.workspace.onLayoutReady(() => {
      this.getAllTerms();
      this.makeNewFile();
    });
    this.addCommand({
      id: "define-term",
      name: "Define Term",
      editorCallback: (editor, view) => {
        if (editor.getSelection().match(/^[a-zA-Z][a-zA-Z0-9 ]*$/)) {
          new DefinitionPopup(this.app, this.settings, editor.getSelection(), (formatting) => {
            this.defineTerm(editor, formatting);
          }).open();
        } else {
          if (!editor.getSelection().charAt(0).match(/^[a-zA-Z]/)) {
            new import_obsidian.Notice("Term must start with an alphabetical character!");
          } else {
            new import_obsidian.Notice("Term can only contain alphanumeric characters!");
          }
        }
      }
    });
    this.addCommand({
      id: "clear-term-definition",
      name: "Clear Term Definition",
      editorCallback: (editor, view) => {
        if (editor.getSelection().match(/^\[\[Definitions#\^[a-zA-Z0-9]+|[a-zA-Z0-9]+\]\]/)) {
          const m = editor.getSelection().match(/\|[a-zA-Z0-9]+/);
          if (m) {
            const termToclear = m[0].substring(1);
            this.removeDefinedTerm(editor, termToclear);
            delete this.termDict[termToclear];
            editor.replaceSelection(termToclear);
            new import_obsidian.Notice("Cleared definition!");
          }
        }
      }
    });
    this.addSettingTab(new TMSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async makeNewFile() {
    this.defsNote = this.app.vault.getFileByPath("Definitions.md");
    if (!this.defsNote) {
      this.defsNote = await this.app.vault.create("Definitions.md", this.defaultHeadings);
    }
    if (this.defsNote) {
      let defsContent = await this.app.vault.read(this.defsNote);
      if (defsContent == "") {
        this.app.vault.modify(this.defsNote, this.defaultHeadings);
        defsContent = await this.app.vault.read(this.defsNote);
      }
    }
  }
  async getAllTerms() {
    this.makeNewFile();
    if (this.defsNote) {
      let defsContent = await this.app.vault.read(this.defsNote);
      let contentList = defsContent.split("\n");
      let currentTerm = "";
      contentList.forEach((s) => {
        let matches = s.match(this.termRegex);
        let temp = "";
        if (matches) {
          temp = matches[0].substring(1, matches[0].length - 1);
        }
        if (s.charAt(0) == "-" && s.substring(0, 3) != "---") {
          currentTerm = temp;
        } else if (s.startsWith("	")) {
          this.termDict[currentTerm] = temp;
        }
      });
    }
  }
  async defineTerm(editor, formatting) {
    const selectedText = editor.getSelection();
    this.makeNewFile();
    if (this.defsNote) {
      let defsContent = await this.app.vault.read(this.defsNote);
      const termDef = "- " + this.buildDefinitionStyle(true, formatting.termColour, formatting.termItalics, formatting.termBold) + selectedText.charAt(0).toUpperCase() + selectedText.substring(1) + "</span>";
      const termDefNoSpaces = this.removeSpaces(selectedText);
      const defDef = this.buildDefinitionStyle(false, formatting.defnColour, formatting.defnItalics, formatting.defnBold) + formatting.text + `</span> ^${termDefNoSpaces}`;
      const updatedContent = this.placeTermInOrder(defsContent, termDef, defDef, selectedText);
      this.app.vault.modify(this.defsNote, updatedContent);
      editor.replaceSelection(`[[Definitions#^${termDefNoSpaces}|${selectedText}]]`);
      this.termDict[selectedText] = formatting.text;
      new import_obsidian.Notice("Defined!");
    }
  }
  buildDefinitionStyle(isTerm, colour, italicise, bold) {
    let start;
    if (isTerm) {
      start = `<span class='term' style='color: ${colour}; `;
    } else {
      start = `<span class='definition' style='color: ${colour}; `;
    }
    let end = "'>";
    if (italicise) {
      start += `font-style: italic; `;
    }
    if (bold) {
      start += `font-weight: bold; `;
    }
    return start + end;
  }
  removeSpaces(text) {
    let splitted = text.split(" ");
    let formattedText = "";
    splitted.forEach((v) => {
      if (v != " ") {
        if (!v.charAt(0).match("[A-Z]")) {
          formattedText += v.charAt(0).toUpperCase() + v.substring(1);
        } else {
          formattedText += v;
        }
      }
    });
    return formattedText;
  }
  placeTermInOrder(content, term, defn, termName) {
    const contentList = content.split("\n");
    let updatedContent = "";
    let check = false;
    contentList.forEach((s) => {
      if (s.startsWith("#") && check == false) {
        if (s.charAt(2) == termName.charAt(0).toUpperCase()) {
          check = true;
        }
      } else if (check == true) {
        if (s.startsWith("-") && !s.startsWith("---")) {
          let matches = s.match(this.termRegex);
          if (matches) {
            let temp = matches[0].substring(1, matches[0].length - 1).toLowerCase();
            if (termName.toLowerCase() < temp) {
              updatedContent += `${term}
	${defn}
`;
              check = false;
            }
          }
        } else if (!s.startsWith("	")) {
          updatedContent += `${term}
	${defn}
`;
          check = false;
        }
      }
      updatedContent += s + "\n";
    });
    return updatedContent;
  }
  async removeDefinedTerm(editor, termToclear) {
    if (this.defsNote) {
      let defsContent = await this.app.vault.read(this.defsNote);
      if (defsContent) {
        let updatedContent = "";
        let contentList = defsContent.split("\n");
        let removeDef = false;
        contentList.forEach((s) => {
          if (s.startsWith("-") && !s.startsWith("---")) {
            let matches = s.match(this.termRegex);
            if (matches) {
              let temp = matches[0].substring(1, matches[0].length - 1).toLowerCase();
              if (temp != termToclear.toLowerCase()) {
                updatedContent += s + "\n";
              } else {
                removeDef = true;
              }
            }
          } else {
            if (removeDef == false) {
              updatedContent += s + "\n";
            }
            removeDef = false;
          }
        });
        this.app.vault.modify(this.defsNote, updatedContent);
      }
    }
  }
};
var TMSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Terms").setHeading();
    new import_obsidian.Setting(containerEl).setName("Term text colour").setDesc("Change the term's default text colour").addColorPicker((cb) => {
      cb.setValue(this.plugin.settings.term_colour);
      cb.onChange(async (value) => {
        this.plugin.settings.term_colour = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Bold term").setDesc("Set the term to be bold").addToggle((btn) => {
      btn.setValue(this.plugin.settings.term_bold);
      btn.onChange(async (value) => {
        this.plugin.settings.term_bold = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Italicise term").setDesc("Set the term to be italicised").addToggle((btn) => {
      btn.setValue(this.plugin.settings.term_italics);
      btn.onChange(async (value) => {
        this.plugin.settings.term_italics = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Definitions").setHeading();
    new import_obsidian.Setting(containerEl).setName("Definition text colour").setDesc("Change the definition's default text colour").addColorPicker((cb) => {
      cb.setValue(this.plugin.settings.defn_colour);
      cb.onChange(async (value) => {
        this.plugin.settings.defn_colour = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Bold definition").setDesc("Set the definition to be bold").addToggle((btn) => {
      btn.setValue(this.plugin.settings.defn_bold);
      btn.onChange(async (value) => {
        this.plugin.settings.defn_bold = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Italicise definition").setDesc("Set the definition to be italicised").addToggle((btn) => {
      btn.setValue(this.plugin.settings.defn_italics);
      btn.onChange(async (value) => {
        this.plugin.settings.defn_italics = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
var DefinitionPopup = class extends import_obsidian.Modal {
  constructor(app, settings, term, onSubmit) {
    super(app);
    this.formatting = {
      text: "",
      termColour: "",
      defnColour: "",
      termBold: false,
      termItalics: false,
      defnBold: false,
      defnItalics: false
    };
    this.settings = settings;
    this.onSubmit = onSubmit;
    this.termToDefine = term;
    this.formatting.termBold = this.settings.term_bold;
    this.formatting.termItalics = this.settings.term_italics;
    this.formatting.defnBold = this.settings.defn_bold;
    this.formatting.defnItalics = this.settings.defn_italics;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: `Define '${this.termToDefine}'` });
    new import_obsidian.Setting(contentEl).setName("Definition").setDesc("Write the definition for this term here").addText(
      (text) => text.onChange((value) => {
        this.formatting.text = value;
      })
    );
    new import_obsidian.Setting(contentEl).setName("Term colour").setDesc(`Default: ${this.settings.term_colour}`).addColorPicker((cb) => {
      cb.setValue(this.settings.term_colour);
      this.formatting.termColour = this.settings.term_colour;
      cb.onChange((value) => {
        this.formatting.termColour = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Definition colour").setDesc(`Default: ${this.settings.defn_colour}`).addColorPicker((cb) => {
      cb.setValue(this.settings.defn_colour);
      this.formatting.defnColour = this.settings.defn_colour;
      cb.onChange((value) => {
        this.formatting.defnColour = value;
      });
    });
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Create").setCta().onClick(() => {
        this.close();
        this.onSubmit(this.formatting);
      })
    );
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
